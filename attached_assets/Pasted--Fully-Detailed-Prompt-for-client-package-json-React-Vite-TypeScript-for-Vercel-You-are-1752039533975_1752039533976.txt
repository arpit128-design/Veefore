// âœ… Fully Detailed Prompt for client/package.json (React + Vite + TypeScript for Vercel)
/*
You are an expert project scaffolder. I want you to generate a complete and production-ready `package.json` for a frontend React project using **Vite with TypeScript**, located inside a `/client` folder.

ðŸ”§ Requirements:
- Project type: React + Vite + TypeScript (ESModules)
- Output directory: `dist` (for Vercel deployment)
- Ensure proper configuration for Vercel auto-deployments
- Use latest stable versions of all packages

âœ… Include dependencies:
- `react`, `react-dom`, `vite`, `@vitejs/plugin-react`, `axios`

âœ… Include dev dependencies:
- `typescript`, `@types/react`, `@types/react-dom`
- `eslint`, `eslint-plugin-react`, `prettier`, `tailwindcss`, `@typescript-eslint/eslint-plugin`, `@typescript-eslint/parser`

âœ… Scripts:
- `dev`: starts Vite dev server
- `build`: production build
- `preview`: preview built output
- `lint`: runs eslint on src
- `format`: runs prettier on all files

âœ… Config:
- Set `type` to `module`
- Include `browserslist` for targeting modern browsers
- Generate proper `tsconfig.json` to support Vite + React + JSX + Tailwind

ðŸ“‚ Also, before generating this package.json, check if the following files exist. If not, generate them:
- `vite.config.ts`: for Vite + React + TypeScript setup
- `tsconfig.json`: with correct compilerOptions for Vite + JSX
- `index.html`: React entry
- `src/main.tsx`: entry file using `createRoot` and `App`
- `src/App.tsx`: main component file
- `tailwind.config.js` and `postcss.config.js`: if Tailwind is used
- `.env.example`: with sample `VITE_API_URL`
*/


// âœ… Fully Detailed Prompt for server/package.json (Express backend + TypeScript for Railway)
/*
You are an expert Node.js backend architect. I want you to generate a complete and production-ready `package.json` file for a **Node.js + Express backend with TypeScript**, located in a `/server` folder.

ðŸ”§ Requirements:
- Project type: Node.js + Express + TypeScript (ESModules)
- Entry point: `src/index.ts`, output: compiled to `dist/index.js`
- Must be ready for deployment on Railway
- Use latest versions of all packages

âœ… Include dependencies:
- `express`, `cors`, `dotenv`, `mongoose`, `axios`, `jsonwebtoken`, `multer`

âœ… Include dev dependencies:
- `typescript`, `ts-node`, `nodemon`, `@types/node`, `@types/express`, `@types/cors`, `@types/jsonwebtoken`, `@types/multer`

âœ… Scripts:
- `start`: runs built code using Node.js
- `dev`: runs ts-node with nodemon from `src/index.ts`
- `build`: compiles TypeScript to JavaScript in `/dist`

âœ… Config:
- Set `main` to `dist/index.js`
- Add `type: module`
- Add `engines` to specify Node.js >= 18
- Add `tsconfig.json` for Node.js + ESModules + TypeScript setup

ðŸ“‚ Also, before generating this package.json, check if the following files exist. If not, generate them:
- `src/index.ts`: Express app entry point
- `tsconfig.json`: for Node.js backend with ESModules
- `.env.example`: sample with `MONGODB_URI`, `PORT`, etc.
- Optional: `.eslintrc.cjs`, `.prettierrc`, `nodemon.json`
*/
